name: Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.clang-format'
      - '.codacy.yaml'
      - '.github/*'
      - '.github/workflows/lint-gamedb.yml'
      - '.github/workflows/linux-workflow.yml'
      - '.github/workflows/macos-workflow.yml'
      - '.github/workflows/scripts/linux/**'
      - '.github/workflows/scripts/validation/**'
      - '.gitignore'
      - 'bin/PCSX2_keys.ini.default'
      - 'build.sh'
      - 'buildbot.xml'
      - 'linux_various/**'
      - 'mscompile.cmd'
      - 'pcsx2/CDVD/Linux/**'
      - 'pcsx2/DEV9/Linux/**'
      - 'pcsx2/Linux/**'
      - 'pcsx2/PAD/Linux/**'
      - 'pcsx2/SPU2/Linux/**'
      - 'pcsx2/USB/linux/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.clang-format'
      - '.codacy.yaml'
      - '.github/*'
      - '.github/workflows/lint-gamedb.yml'
      - '.github/workflows/linux-workflow.yml'
      - '.github/workflows/macos-workflow.yml'
      - '.github/workflows/scripts/linux/**'
      - '.github/workflows/scripts/validation/**'
      - '.gitignore'
      - 'bin/PCSX2_keys.ini.default'
      - 'build.sh'
      - 'buildbot.xml'
      - 'linux_various/**'
      - 'mscompile.cmd'
      - 'pcsx2/CDVD/Linux/**'
      - 'pcsx2/DEV9/Linux/**'
      - 'pcsx2/Linux/**'
      - 'pcsx2/PAD/Linux/**'
      - 'pcsx2/SPU2/Linux/**'
      - 'pcsx2/USB/linux/**'
  workflow_dispatch:
    inputs:
      retainDebugArtifacts:
        description: 'Retain debug artifacts (.pdb/.exp/.lib) for an easier debugging experience. (true|false)'
        required: true
        default: 'false'

jobs:
  Windows:
    strategy:
      # Prevent one build from failing everything (although maybe those should be included as experimental builds instead)
      fail-fast: false
      matrix:
        os: [windows-2019]
        platform: [Win32, x64]
        configuration: [Release, Release AVX2]
        experimental: [false]

    name: Windows-${{ matrix.platform }} | ${{ matrix.configuration }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    # Set some sort of timeout in the event of run-away builds.  We are limited on concurrent jobs so, get rid of them.
    timeout-minutes: 30

    env:
      POWERSHELL_TELEMETRY_OPTOUT: 1

    steps:
      # NOTE - useful for debugging
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Checkout Submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive -j $env:NUMBER_OF_PROCESSORS

      - name: Verify VS Project Files
        run: .github\workflows\scripts\windows\validate-vs-filters.ps1

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1

      - name: Build PCSX2
        env:
          # Set to 'true' to retain the .pdb / .exp / .lib, etc files which can be useful for repro'ing issues that only occur in the compiled .exe
          RetainDebuggingArtifacts: ${{ github.event.inputs.retainDebugArtifacts == 'true' }}
        run: msbuild "PCSX2_suite.sln" /m /v:m /p:Configuration="${{ matrix.configuration }}" /p:Platform="${{ matrix.platform }}"

      - name: Prepare Artifact Metadata
        id: artifact-metadata
        shell: bash
        run: |
          ARCH=$([ "${{ matrix.platform }}" == Win32 ] && echo "32bit" || echo "64bit")
          SIMD=$([ "${{ matrix.configuration }}" == Release ] && echo "SSE4" || echo "AVX2")
          if [ ${{ github.event_name }} == "pull_request" ]; then
            PR_SHA=$(git rev-parse --short "${{ github.event.pull_request.head.sha }}")
            ARTIFACT_NAME="PCSX2-Win-${ARCH}-${SIMD}"
            if [ ! -z "${{ github.event.pull_request.number }}" ]; then
              PR_NUM=${{ github.event.pull_request.number }}
              ARTIFACT_NAME="${ARTIFACT_NAME}-pr[${PR_NUM}]"
            fi
            ARTIFACT_NAME="${ARTIFACT_NAME}-sha[${PR_SHA}]"
            if [ ! -z "${{ github.event.pull_request.title }}" ]; then
              PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | tr -cd '[a-zA-Z0-9[:space:]]_-')
              ARTIFACT_NAME="${ARTIFACT_NAME}-title["${PR_TITLE}""
            fi
          else
            SHA=$(git rev-parse --short "$GITHUB_SHA")
            ARTIFACT_NAME="PCSX2-Win-${ARCH}-${SIMD}-sha[${SHA}"
          fi
          TRIMMED_ARTIFACT_NAME=$(printf "%.199s]" "$ARTIFACT_NAME")
          echo "name=$TRIMMED_ARTIFACT_NAME"
          echo "##[set-output name=name;]${TRIMMED_ARTIFACT_NAME}"
      - name: Prepare Artifact Folder
        shell: bash
        working-directory: bin
        run: |
          retainDebugArtifacts=$([ "${{ github.event.inputs.retainDebugArtifacts }}" == "true" ] && echo "true" || echo "false")
          if [ "${retainDebugArtifacts}" == "false" ]; then
            ls ./
            rm -f *.bsc *.exp *.ilk *.iobj *.ipdb *.lib *.pdb
          fi
          shopt -s extglob dotglob
          mkdir -p "${{ steps.artifact-metadata.outputs.name }}"
          mv !("${{ steps.artifact-metadata.outputs.name }}") "${{ steps.artifact-metadata.outputs.name }}"
          shopt -u dotglob
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: ${{ steps.artifact-metadata.outputs.name }}
          path: bin
          retention-days: 30
          
  Linux:
    strategy:
      # Prevent one build from failing everything (although maybe those should be included as experimental builds instead)
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-18.04
            platform: x86
            compiler: gcc
            appimage: true
            experimental: false
          - os: ubuntu-18.04
            platform: x64
            compiler: gcc
            appimage: true
            experimental: false
          - os: ubuntu-18.04
            platform: x86
            compiler: clang
            # Need to disable PCH until cmake 3.17
            # (PCH conflicts with ccache, fixed by https://gitlab.kitware.com/cmake/cmake/-/merge_requests/4400)
            cmakeflags: -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            detail: " nopch"
            experimental: false
          - os: ubuntu-18.04
            platform: x86
            compiler: gcc
            cmakeflags: -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            detail: " nopch"
            experimental: false
          - os: ubuntu-18.04
            platform: x86
            compiler: gcc
            cmakeflags: -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON -DARCH_FLAG=-march=haswell
            detail: " avx2 nopch"
            experimental: false

    name: Linux-${{ matrix.platform }} | ${{ matrix.compiler }}${{ matrix.detail }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    # Set some sort of timeout in the event of run-away builds.  We are limited on concurrent jobs so, get rid of them.
    timeout-minutes: 30

    steps:
      # NOTE - useful for debugging
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: |
      #     echo "$GITHUB_CONTEXT"
      #     echo ${{ github.event.pull_request.title }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Checkout Submodules
        if: steps.cache-submodules.outputs.cache-hit != 'true'
        run: git submodule update --init --recursive -j $(getconf _NPROCESSORS_ONLN)

      # -- SETUP CCACHE - https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: ccache cache files
        uses: actions/cache@v2.1.6
        with:
          path: .ccache
          key: ${{ matrix.os }} ${{ matrix.platform }} ${{ matrix.compiler }}${{ matrix.detail }} ccache ${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: ${{ matrix.os }} ${{ matrix.platform }} ${{ matrix.compiler }}${{ matrix.detail }} ccache

      - name: Prepare Artifact Metadata
        id: artifact-metadata
        shell: bash
        run: |
          ARCH=$([ "${{ matrix.platform }}" == x86 ] && echo "32bit" || echo "64bit")
          ARTIFACT_NAME=""
          if [ ${{ github.event_name }} == "pull_request" ]; then
            PR_SHA=$(git rev-parse --short "${{ github.event.pull_request.head.sha }}")
            ARTIFACT_NAME="PCSX2-Linux-${ARCH}"
            if [ ! -z "${{ github.event.pull_request.number }}" ]; then
              PR_NUM=${{ github.event.pull_request.number }}
              ARTIFACT_NAME="${ARTIFACT_NAME}-pr[${PR_NUM}]"
            fi
            ARTIFACT_NAME="${ARTIFACT_NAME}-sha[${PR_SHA}]"
            if [ ! -z "${{ github.event.pull_request.title }}" ]; then
              PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | tr -cd '[a-zA-Z0-9[:space:]]_-')
              ARTIFACT_NAME="${ARTIFACT_NAME}-title["${PR_TITLE}""
            fi
          else
            SHA=$(git rev-parse --short "$GITHUB_SHA")
            ARTIFACT_NAME="PCSX2-Linux-${ARCH}-sha[${SHA}"
          fi
          TRIMMED_ARTIFACT_NAME=$(printf "%.199s]" "$ARTIFACT_NAME")
          echo "name=$TRIMMED_ARTIFACT_NAME"
          echo "##[set-output name=name;]${TRIMMED_ARTIFACT_NAME}"
          
      - name: Install Packages
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
        run: .github/workflows/scripts/linux/install-packages.sh

      - name: Generate CMake
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
          ADDITIONAL_CMAKE_ARGS: ${{ matrix.cmakeflags }}
        run: .github/workflows/scripts/linux/generate-cmake.sh

      - name: Build PCSX2
        working-directory: build
        run: ../.github/workflows/scripts/linux/compile.sh
        
      - name: Package AppImage
        env:
          PLATFORM: ${{ matrix.platform }}
          COMPILER: ${{ matrix.compiler }}
          name: ${{ steps.artifact-metadata.outputs.name }}
        run: .github/workflows/scripts/linux/appimage.sh
        if: ${{ matrix.appimage }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.artifact-metadata.outputs.name }}
          path: artifacts
        if: ${{ matrix.appimage }}
        
  Mac:
    strategy:
      # Prevent one build from failing everything (although maybe those should be included as experimental builds instead)
      fail-fast: false
      matrix:
        os: [macos-10.15]
        platform: [x64]
        experimental: [false]

    name: Mac-${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    # Set some sort of timeout in the event of run-away builds.  We are limited on concurrent jobs so, get rid of them.
    timeout-minutes: 30

    steps:
      # NOTE - useful for debugging
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: |
      #     echo "$GITHUB_CONTEXT"
      #     echo ${{ github.event.pull_request.title }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Checkout Submodules
        run: git submodule update --init --recursive -j $(getconf _NPROCESSORS_ONLN)

      - name: Install Packages
        env:
          PLATFORM: ${{ matrix.platform }}
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_ANALYTICS: 1
        run: |
          # To save time, only brew update if running the install without it fails
          function do-install() {
            brew install sound-touch portaudio wxmac gtk+3 sdl2 libsamplerate
          }
          if ! do-install; then
            brew update
            do-install
          fi
      - name: Generate CMake Files
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_PO=FALSE -B build .

      - name: Build PCSX2
        working-directory: build
        run: make -j$(getconf _NPROCESSORS_ONLN) # macOS doesn't use make install